// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`default export > file > Should minify files as expected 1`] = `"const person={name:\`Alice\`,age:30};type PersonType=typeof person;type Animal={name:string;};const dog=(({name:\`Buddy\`,breed:\`Golden Retriever\`}) satisfies Animal);function identity<e extends number|string = string>(_:e): e{return _}let str=identity(),num=identity(42);interface HasLength{length:number;}function logLength<e extends HasLength = string>(_:e): void{console.log(_.length)}logLength(\`Hello\`),logLength([1,2,3]);function add(e:number,_:number): number{return e+_}type AddFunctionType=typeof add;interface Box<e extends object = {message:string;}>{content:e;}let defaultBox:Box={content:{message:\`Hello\`}},customBox:Box<{status:number;}>={content:{status:200}};type Task={title:string;description?:string;completed:boolean;};const myTask=(({title:\`Learn TypeScript\`,completed:!1,priority:\`High\`}) satisfies Task);function wrapInArray<e = string>(_:e): e[]{return[_]}const stringArray=wrapInArray(),numberArray=wrapInArray(42);function combine<e,_>(v:e,y:_): [e,_]{return[v,y]}"`;

exports[`default export > file > Should works well when option verbose set 1`] = `"const person={name:\`Alice\`,age:30};type PersonType=typeof person;type Animal={name:string;};const dog=(({name:\`Buddy\`,breed:\`Golden Retriever\`}) satisfies Animal);function identity<e extends number|string = string>(_:e): e{return _}let str=identity(),num=identity(42);interface HasLength{length:number;}function logLength<e extends HasLength = string>(_:e): void{console.log(_.length)}logLength(\`Hello\`),logLength([1,2,3]);function add(e:number,_:number): number{return e+_}type AddFunctionType=typeof add;interface Box<e extends object = {message:string;}>{content:e;}let defaultBox:Box={content:{message:\`Hello\`}},customBox:Box<{status:number;}>={content:{status:200}};type Task={title:string;description?:string;completed:boolean;};const myTask=(({title:\`Learn TypeScript\`,completed:!1,priority:\`High\`}) satisfies Task);function wrapInArray<e = string>(_:e): e[]{return[_]}const stringArray=wrapInArray(),numberArray=wrapInArray(42);function combine<e,_>(v:e,y:_): [e,_]{return[v,y]}"`;

exports[`default export > stream > Should minify files 1`] = `"const person={name:\`Alice\`,age:30};type PersonType=typeof person;type Animal={name:string;};const dog=(({name:\`Buddy\`,breed:\`Golden Retriever\`}) satisfies Animal);function identity<e extends number|string = string>(_:e): e{return _}let str=identity(),num=identity(42);interface HasLength{length:number;}function logLength<e extends HasLength = string>(_:e): void{console.log(_.length)}logLength(\`Hello\`),logLength([1,2,3]);function add(e:number,_:number): number{return e+_}type AddFunctionType=typeof add;interface Box<e extends object = {message:string;}>{content:e;}let defaultBox:Box={content:{message:\`Hello\`}},customBox:Box<{status:number;}>={content:{status:200}};type Task={title:string;description?:string;completed:boolean;};const myTask=(({title:\`Learn TypeScript\`,completed:!1,priority:\`High\`}) satisfies Task);function wrapInArray<e = string>(_:e): e[]{return[_]}const stringArray=wrapInArray(),numberArray=wrapInArray(42);function combine<e,_>(v:e,y:_): [e,_]{return[v,y]}"`;

exports[`named export > file > Should minify files as expected 1`] = `"const person={name:\`Alice\`,age:30};type PersonType=typeof person;type Animal={name:string;};const dog=(({name:\`Buddy\`,breed:\`Golden Retriever\`}) satisfies Animal);function identity<e extends number|string = string>(_:e): e{return _}let str=identity(),num=identity(42);interface HasLength{length:number;}function logLength<e extends HasLength = string>(_:e): void{console.log(_.length)}logLength(\`Hello\`),logLength([1,2,3]);function add(e:number,_:number): number{return e+_}type AddFunctionType=typeof add;interface Box<e extends object = {message:string;}>{content:e;}let defaultBox:Box={content:{message:\`Hello\`}},customBox:Box<{status:number;}>={content:{status:200}};type Task={title:string;description?:string;completed:boolean;};const myTask=(({title:\`Learn TypeScript\`,completed:!1,priority:\`High\`}) satisfies Task);function wrapInArray<e = string>(_:e): e[]{return[_]}const stringArray=wrapInArray(),numberArray=wrapInArray(42);function combine<e,_>(v:e,y:_): [e,_]{return[v,y]}"`;

exports[`named export > file > Should works well when option verbose set 1`] = `"const person={name:\`Alice\`,age:30};type PersonType=typeof person;type Animal={name:string;};const dog=(({name:\`Buddy\`,breed:\`Golden Retriever\`}) satisfies Animal);function identity<e extends number|string = string>(_:e): e{return _}let str=identity(),num=identity(42);interface HasLength{length:number;}function logLength<e extends HasLength = string>(_:e): void{console.log(_.length)}logLength(\`Hello\`),logLength([1,2,3]);function add(e:number,_:number): number{return e+_}type AddFunctionType=typeof add;interface Box<e extends object = {message:string;}>{content:e;}let defaultBox:Box={content:{message:\`Hello\`}},customBox:Box<{status:number;}>={content:{status:200}};type Task={title:string;description?:string;completed:boolean;};const myTask=(({title:\`Learn TypeScript\`,completed:!1,priority:\`High\`}) satisfies Task);function wrapInArray<e = string>(_:e): e[]{return[_]}const stringArray=wrapInArray(),numberArray=wrapInArray(42);function combine<e,_>(v:e,y:_): [e,_]{return[v,y]}"`;

exports[`named export > stream > Should minify files 1`] = `"const person={name:\`Alice\`,age:30};type PersonType=typeof person;type Animal={name:string;};const dog=(({name:\`Buddy\`,breed:\`Golden Retriever\`}) satisfies Animal);function identity<e extends number|string = string>(_:e): e{return _}let str=identity(),num=identity(42);interface HasLength{length:number;}function logLength<e extends HasLength = string>(_:e): void{console.log(_.length)}logLength(\`Hello\`),logLength([1,2,3]);function add(e:number,_:number): number{return e+_}type AddFunctionType=typeof add;interface Box<e extends object = {message:string;}>{content:e;}let defaultBox:Box={content:{message:\`Hello\`}},customBox:Box<{status:number;}>={content:{status:200}};type Task={title:string;description?:string;completed:boolean;};const myTask=(({title:\`Learn TypeScript\`,completed:!1,priority:\`High\`}) satisfies Task);function wrapInArray<e = string>(_:e): e[]{return[_]}const stringArray=wrapInArray(),numberArray=wrapInArray(42);function combine<e,_>(v:e,y:_): [e,_]{return[v,y]}"`;
